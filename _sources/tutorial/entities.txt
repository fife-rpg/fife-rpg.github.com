.. _entities:

Filling the map
===============
After we are able to load maps we now want to be able to have objects on them
with which we can interact or control.

Entities and Components
-----------------------
FIFErpg uses a modified version of the
`Grease Framework <http://packages.python.org/grease/index.html>`_ which uses a
Component Based Entity System. Components simply store various data values. The
component classes used do not have any methods to work with these values. They
are like database tables. An entity is a container that has components attached
to it. What component an entity has determines what it can do, or what can be
done with it or to it. FIFErpg entities have two mandatory components, namely
the ":py:class:`General <fife_rpg.components.general.General>`" component,
which sets the unique identifier of the component and the
":py:class:`Agent <fife_rpg.components.agent.Agent>`" component, which contains
the basic information needed to place the Entity on a map. Agents that are
actually displayed on a map also have a
":py:class:`FifeAgent <fife_rpg.components.fifeagent.FifeAgent>`" component,
but that is automatically created as these are placed on the map. All other
components can be set freely for each entity.

Setting up Components
---------------------
We already added the "Components" setting in the previous tutorial, but did not
explain what it does. FIFErpg allows one to customize what components are
actually wanted and also to add custom components. The actual details for
adding components will not be discussed in this tutorial, but may be in a
separate one. Basically, though, each component needs to register itself to the
:py:mod:`ComponentManager <fife_rpg.components.component_manager>`. To make
that easier FIFErpg can read the available components from a file and it then
it just needs a list of the components that it should register. The easiest
method to set the list is the "Components" setting in the FIFE settings file.
Then you just need to call

.. code:: python

   app.register_components()

In the last tutorial we need to register the Agent component since FIFErpg
looks for entities with that component if a map is loaded.

To actually place entities on a map we need to activate two more components.
They are, as already said in the previous section, General and FifeAgent. You
need to change the component setting to this:

.. code::

   General ; Agent ; FifeAgent
   
Note that the delimiter for lists in FIFE setting files is " ; ". The spaces
are important, if you forget them you will get an error.

Behaviours
----------
Behaviours are FIFE `InstanceActionListeners
<http://www.fifengine.net/epydoc/fife.fife.InstanceActionListener-class.html>`_
thus have a method that gets called when the instance has finished doing an
action, allowing one to set what the agent does next and create daily routines.
They also manage the animation queue of an agent, which allows the agent
to queue animations.

Currently FIFErpg only has one behaviour: The Base Behaviour. This is the
most simple behaviour which only provides the basic functionality.

Like components behaviours have to be registered first. This can be done
similar to components through the settings file. The structure is the same,
a list that sets what Behaviours to register. The :download:`combined.yaml`
also contains the standard behaviours of FIFErpg. If you downloaded that file
before this tutorial was made you may want to re download it though.

For this tutorial you will need to add the "Base" behaviour to this list.

You can review the changes in the
:download:`settings <entities/settings-dist.xml>` file.

Adding Entities
---------------

With these preparations complete we can move on to place entities on the map.
FIFErpg offers a method to load entities from a file. Each entity is a
YAML document in that file. The default file name and location is
"objects/entities.yaml".

The structure of each document is simple:

.. code:: yaml

   !Entity
   Template: Name of Template
   Components:  
       Name of component:
         component field: value
         component field: value
         ...
       Another component:
         another component field: value
         ...
       ...
       
The Template line is optional. The "!Entity" line is a special command for
`PyYAML <http://pyyaml.org/>`_, which FIFErpg uses. The Components part is
basically a list of Components, using the name they are registered with,
and their field values. The standard components are set to use their class
name, which is also the name in the :download:`combined.yaml` file.

With that we can add our first entity. Create a file named entities.yaml
inside the objects subdirectory and put the following in it:

.. code:: yaml

   !Entity
   Components:
     General:
         identifier: PlayerCharacter
     Agent:
         gfx: player
         map: Level1
         layer: actors
         position: [-5, 0]
         rotation: 180
         behaviour_type: Base
         
The field values are explained in the respective component modules.

To actually have the entity appear on the map we need to add more code to load
and register the behaviours and load and place the agents.

The behaviours are loaded and registered similar to components, add the
following lines before creating the world:

.. code:: python

    app.load_behaviours("combined.yaml")
    app.register_behaviours()

The entities and components are managed by the world, which can be accessed
through the application.

The following code is all that is needed to load and the entities:

.. code:: python

    world = app.world
    world.import_agent_objects()
    world.load_and_create_entities()

:py:meth:`import_agent_objects() <fife_rpg.world.RPGWorld.import_agent_objects>`
will import fife object definitions from a specific directory. By default it
will use the "AgentObjectsPath" setting which defaults to "objects/agents".

:py:meth:`load_and_create_entities() <fife_rpg.world.RPGWorld.load_and_create_entities>`
will load the entities from the entities file and create them.

The actual placement of entities that are on a map is done when switching to
the map. So, since loading the entities needs a world object, these lines have
to be added after creating the world and before switching to a map.
be loaded before doing that.

Here is the complete code with the changes:

.. code-block:: python
   :emphasize-lines: 11, 13, 18-20

   from fife_rpg import RPGApplication
   from fife_rpg import GameSceneView
   from fife_rpg import GameSceneController
   from fife.extensions.fife_settings import Setting

   settings = Setting(app_name="Tutorial 3", settings_file="settings.xml")

   def main():
       app = RPGApplication(settings)
       app.load_components("combined.yaml")
       app.load_behaviours("combined.yaml")
       app.register_components()
       app.register_behaviours()
       view = GameSceneView(app)
       controller = GameSceneController(view, app)
       app.create_world()
       app.load_maps()
       world = app.world
       world.import_agent_objects()
       world.load_and_create_entities()
       app.switch_map("Level1")
       app.push_mode(controller)
       app.run()

   if __name__ == '__main__':
       main()
       
You will need the "player" object to be able to run that code. The one used
for the tutorial is inside the
:download:`agents.7z <entities/objects/agents.7z>` archive. Extract it into
the objects subdirectory. It should create a agents subdirectory there.

If you run this code you should see something like this:

.. figure:: entities/entities_screenshot.png
   :align:   center
   
   This may vary if you used a different map.

The :ref:`next <controlling>` tutorial will show how to control entities.